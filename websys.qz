struct JsRef {
    data: i32,
}

module JsRef {
    fun new(data: i32): JsRef {
        return JsRef {
            data: data,
        };
    }
}

struct JsString {
    data: ptr[byte], // ciovec
}

module JsString {
    fun new(s: string): JsString {
        let ciovec = make[ptr[byte]](8);
        set_ciovec(ciovec, s.data, s.length);

        return JsString {
            data: ciovec,
        };
    }
}

// ----
// bindings
@[declare_params(message as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun console_log(message: ptr[byte]);

@[declare_params(result as wasm_i32), declare_namespace("js")]
declare fun window(): i32;

@[declare_params(window as wasm_i32, result as wasm_i32), declare_namespace("js")]
declare fun window_document(window: i32): i32;

@[declare_params(document as wasm_i32, id as wasm_i32, result as wasm_i32), declare_namespace("js")]
declare fun document_get_element_by_id(document: i32, id: ptr[byte]): i32;

@[declare_params(canvas as wasm_i32, context as wasm_i32, result as wasm_i32), declare_namespace("js")]
declare fun canvas_get_context(canvas: i32, context: ptr[byte]): i32;

@[declare_params(context as wasm_i32, x as wasm_i32, y as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun context_move_to(context: i32, x: i32, y: i32);

@[declare_params(context as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun context_begin_path(context: i32);

@[declare_params(context as wasm_i32, x as wasm_i32, y as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun context_line_to(context: i32, x: i32, y: i32);

@[declare_params(context as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun context_stroke(context: i32);

@[declare_params(context as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun context_fill(context: i32);

@[declare_params(context as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun context_close_path(context: i32);

@[declare_params(context as wasm_i32, style as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun context_set_fill_style(context: i32, style: ptr[byte]);

@[declare_params(min as wasm_i32, max as wasm_i32, result as wasm_i32), declare_namespace("js")]
declare fun math_random_minmax(min: i32, max: i32): i32;

@[declare_params(result as wasm_i32), declare_namespace("js")]
declare fun image_new(): i32;

@[declare_params(image as wasm_i32, src as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun image_set_src(image: i32, src: ptr[byte]);

@[declare_params(context as wasm_i32, image as wasm_i32, x as wasm_i32, y as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun context_draw_image(context: i32, image: i32, x: i32, y: i32);

@[declare_params(context as wasm_i32, image as wasm_i32, x as wasm_i32, y as wasm_i32, w as wasm_i32, h as wasm_i32, dx as wasm_i32, dy as wasm_i32, dw as wasm_i32, dh as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun context_draw_image_with_sw_sh_dx_dy_dw_dh(context: i32, image: i32, x: i32, y: i32, w: i32, h: i32, dx: i32, dy: i32, dw: i32, dh: i32);

@[declare_params(image as wasm_i32, callback as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun image_set_onload(image: i32, callback: any);

@[declare_params(image as wasm_i32, callback as wasm_i32, result as wasm_void), declare_namespace("js")]
declare fun image_set_onerror(image: i32, callback: any);

@[declare_params(url as wasm_i32, callback as wasm_i32, result as wasm_i32), declare_namespace("js")]
declare fun fetch(url: ptr[byte], callback: any): i32;

@[declare_params(ref as wasm_i32, result as wasm_i32), declare_namespace("js")]
declare fun jsvalue_string_length(ref: i32): i32;

@[declare_params(ref as wasm_i32, data as wasm_i32, length as wasm_i32, result as wasm_i32), declare_namespace("js")]
declare fun jsvalue_string_set(ref: i32, data: ptr[byte], length: i32): i32;

// ----
// js library
fun js_console_log(message: string) {
    _console_log(JsString::new(message).data);
}

fun js_window(): JsRef {
    return JsRef {
        data: _window(),
    };
}

fun js_window_document(window: JsRef): JsRef {
    return JsRef {
        data: _window_document(window.data),
    };
}

fun js_document_get_element_by_id(document: JsRef, id: string): JsRef {
    return JsRef::new(_document_get_element_by_id(document.data, JsString::new(id).data));
}

fun js_canvas_get_context(canvas: JsRef, context: string): JsRef {
    return JsRef::new(_canvas_get_context(canvas.data, JsString::new(context).data));
}

fun js_context_move_to(context: JsRef, x: i32, y: i32) {
    _context_move_to(context.data, x, y);
}

fun js_context_begin_path(context: JsRef) {
    _context_begin_path(context.data);
}

fun js_context_line_to(context: JsRef, x: i32, y: i32) {
    _context_line_to(context.data, x, y);
}

fun js_context_stroke(context: JsRef) {
    _context_stroke(context.data);
}

fun js_context_fill(context: JsRef) {
    _context_fill(context.data);
}

fun js_context_close_path(context: JsRef) {
    _context_close_path(context.data);
}

fun js_context_set_fill_style(context: JsRef, style: string) {
    _context_set_fill_style(context.data, JsString::new(style).data);
}

fun js_math_random_minmax(min: i32, max: i32): i32 {
    return _math_random_minmax(min, max);
}

fun js_image_new(): JsRef {
    let i = _image_new();
    let j = JsRef::new(i);

    return j;
}

fun js_image_set_src(image: JsRef, src: string) {
    _image_set_src(image.data, JsString::new(src).data);
}

fun js_context_draw_image(context: JsRef, image: JsRef, x: i32, y: i32) {
    _context_draw_image(context.data, image.data, x, y);
}

fun js_context_draw_image_with_sw_sh_dx_dy_dw_dh(
    context: JsRef,
    image: JsRef,
    x: i32,
    y: i32,
    w: i32,
    h: i32,
    dx: i32,
    dy: i32,
    dw: i32,
    dh: i32,
) {
    _context_draw_image_with_sw_sh_dx_dy_dw_dh(context.data, image.data, x, y, w, h, dx, dy, dw, dh);
}

fun js_image_set_onload(image: JsRef, callback: fun[(), nil]) {
    _image_set_onload(image.data, callback);
}

fun js_image_set_onerror(image: JsRef, c: fun[(), nil]) {
    _image_set_onerror(image.data, c);
}

fun js_fetch(url: string, callback: fun[(i32), nil]): JsRef {
    return JsRef::new(_fetch(JsString::new(url).data, callback));
}

fun js_jsstring_length(ref: JsRef): i32 {
    return _jsvalue_string_length(ref.data);
}

fun js_jsstring_set(ref: JsRef, p: ptr[byte], length: i32): i32 {
    return _jsvalue_string_set(ref.data, p, length);
}

fun jsstring(ref: JsRef): string {
    let length = js_jsstring_length(ref);
    let str_p = make[ptr[byte]](length);
    js_jsstring_set(ref, str_p, length);

    return new_string(str_p, length);
}

