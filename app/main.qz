import websys;
import json;

struct Color {
    r: i32,
    g: i32,
    b: i32,
}

fun main() {
    let window = js_window();
    let document = js_window_document(window);
    let canvas = js_document_get_element_by_id(document, "canvas");
    let context = js_canvas_get_context(canvas, "2d");
    let frame = 0 - 1;

    js_fetch(
        "assets/rhb.json",
        fun (resp_id: i32) {
            let ref = JsRef::new(resp_id);
            let text = jsstring(ref);

            let j or err = Json::from_string(text);
            if err != nil {
                panic("Failed to parse JSON: {}", derive::to_string(err));
            }

            let sheet = Sheet::from_json(j!);

            let rhb = js_image_new();
            js_image_set_src(rhb, "assets/rhb.png");
            js_image_set_onload(
                rhb,
                fun () {
                    js_set_interval(
                        fun () {
                            frame = (frame + 1) % 8;
                            js_context_clear_rect(context, 0, 0, 600, 600);

                            let sprite = sheet.frames.("Run ({}).png".format((frame + 1).to_string()));
                            js_context_draw_image_with_sw_sh_dx_dy_dw_dh(
                                context,
                                rhb,
                                sprite.frame.x,
                                sprite.frame.y,
                                sprite.frame.w,
                                sprite.frame.h,
                                300,
                                300,
                                sprite.frame.w,
                                sprite.frame.h,
                            );
                        },
                        50,
                    );
                },
            );
            js_image_set_onerror(
                rhb,
                fun () {
                    panic("Image failed to load");
                },
            );
        },
    );

    return nil;
}

struct Sheet {
    frames: map[string, Cell],
}

module Sheet {
    fun from_json(j: Json): Sheet {
        if j.t_object == nil {
            panic("Expected object, got {}", derive::to_string(j));
        }

        let obj = j.t_object!;

        let obj_frames = obj.("frames");
        if obj_frames.t_object == nil {
            panic("Expected object, got {}", derive::to_string(obj_frames));
        }

        let obj_frames_obj = obj_frames.t_object!;

        let frames = make[map[string, Cell]]();

        for key in obj_frames_obj.list_keys() {
            let value = obj_frames_obj.(key);
            let cell = Cell::from_json(value);
            frames.(key) = cell;
        }

        return Sheet {
            frames: frames,
        };
    }
}

struct Cell {
    frame: Rect,
}

module Cell {
    fun from_json(j: Json): Cell {
        if j.t_object == nil {
            panic("Expected object, got {}", derive::to_string(j));
        }

        let obj = j.t_object!;

        let obj_frame = obj.("frame");
        let frame or err = Rect::from_json(obj_frame);
        if err != nil {
            panic("Failed to parse frame: {}", derive::to_string(err));
        }

        return Cell {
            frame: frame!,
        };
    }
}

struct Rect {
    x: i32,
    y: i32,
    w: i32,
    h: i32,
}

module Rect {
    fun from_json(j: Json): Rect or error {
        if j.t_object == nil {
            return _ or error::new("Expected object, got {}".format(derive::to_string(j)));
        }

        let obj = j.t_object!;

        let obj_x = obj.("x");
        if obj_x.t_i32 == nil {
            return _ or error::new("Expected number, got {}".format(derive::to_string(obj_x)));
        }

        let obj_y = obj.("y");
        if obj_y.t_i32 == nil {
            return _ or error::new("Expected number, got {}".format(derive::to_string(obj_y)));
        }

        let obj_w = obj.("w");
        if obj_w.t_i32 == nil {
            return _ or error::new("Expected number, got {}".format(derive::to_string(obj_w)));
        }

        let obj_h = obj.("h");
        if obj_h.t_i32 == nil {
            return _ or error::new("Expected number, got {}".format(derive::to_string(obj_h)));
        }

        return Rect {
            x: obj_x.t_i32!,
            y: obj_y.t_i32!,
            w: obj_w.t_i32!,
            h: obj_h.t_i32!,
        };
    }
}

@[ffi_export("call_closure")]
fun call_closure(callback: fun[(), nil]) {
    callback();
}

@[ffi_export("call_closure_1")]
fun call_closure_1(callback: fun[(any), nil], arg1: any) {
    callback(arg1);
}

